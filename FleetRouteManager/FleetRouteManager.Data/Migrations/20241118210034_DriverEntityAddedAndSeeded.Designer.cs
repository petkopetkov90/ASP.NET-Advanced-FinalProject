// <auto-generated />
using System;
using FleetRouteManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FleetRouteManager.Data.Migrations
{
    [DbContext(typeof(FleetRouteManagerDbContext))]
    [Migration("20241118210034_DriverEntityAddedAndSeeded")]
    partial class DriverEntityAddedAndSeeded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FleetRouteManager.Data.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key for Driver entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Driver's second Phone Number, if have");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Driver's date of birth");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the Driver was marked as released");

                    b.Property<string>("DrivingLicense")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Driver's Driving License");

                    b.Property<DateTime>("DrivingLicenseExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Driver's Driving License expiration date");

                    b.Property<DateTime>("EmployedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Driver's employing date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Driver's First Name");

                    b.Property<string>("IdentityCard")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Driver's Identity Card");

                    b.Property<DateTime>("IdentityCardExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Driver's Identity Card expiration date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Driver was released");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Driver's Last Name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Driver's Middle Name");

                    b.Property<string>("PersonalIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Driver's Personal Identification Number");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Driver's main Phone Number");

                    b.Property<string>("ProfessionalQualificationCard")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Driver's Professional Qualification Card");

                    b.Property<DateTime>("ProfessionalQualificationCardExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Driver's Professional Qualification Card expiration date");

                    b.HasKey("Id");

                    b.HasIndex("PersonalIdentificationNumber")
                        .IsUnique();

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrivingLicense = "D111111111",
                            DrivingLicenseExpirationDate = new DateTime(2025, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ivan",
                            IdentityCard = "111111111",
                            IdentityCardExpirationDate = new DateTime(2025, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            PersonalIdentificationNumber = "0101010101",
                            PhoneNumber = "+359 888 111111",
                            ProfessionalQualificationCard = "PQ111111",
                            ProfessionalQualificationCardExpirationDate = new DateTime(2025, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrivingLicense = "D222222222",
                            DrivingLicenseExpirationDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployedAt = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Georgi",
                            IdentityCard = "222222222",
                            IdentityCardExpirationDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastName = "Georgiev",
                            MiddleName = "Georgiev",
                            PersonalIdentificationNumber = "0202020202",
                            PhoneNumber = "+359 888 222222",
                            ProfessionalQualificationCard = "PQ222222",
                            ProfessionalQualificationCardExpirationDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(2003, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrivingLicense = "D333333333",
                            DrivingLicenseExpirationDate = new DateTime(2025, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployedAt = new DateTime(2023, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Petar",
                            IdentityCard = "333333333",
                            IdentityCardExpirationDate = new DateTime(2025, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastName = "Petrov",
                            MiddleName = "Petrov",
                            PersonalIdentificationNumber = "0303030303",
                            PhoneNumber = "+359 888 333333",
                            ProfessionalQualificationCard = "PQ111111",
                            ProfessionalQualificationCardExpirationDate = new DateTime(2025, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FleetRouteManager.Data.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key for Manufacturer entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Deletion date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft Delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Manufacturer Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Mercedes"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Iveco"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Man"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Scania"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Volvo"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Schmitz"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Krone"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Fruehauf"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Peugeot"
                        });
                });

            modelBuilder.Entity("FleetRouteManager.Data.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key for Vehicle entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquiredOn")
                        .HasColumnType("datetime2")
                        .HasComment("Vehicle Date of Purchase");

                    b.Property<int>("Axles")
                        .HasColumnType("int")
                        .HasComment("Vehicle number of axles");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Body type");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the vehicle was marked as deleted");

                    b.Property<string>("EuroClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Vehicle Emission Class");

                    b.Property<DateTime>("FirstRegistration")
                        .HasColumnType("datetime2")
                        .HasComment("Vehicle First Registration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the vehicle was deleted");

                    b.Property<string>("LiabilityInsurance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Vehicle Liability Insurance policy number");

                    b.Property<DateTime?>("LiabilityInsuranceExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Vehicle Liability Insurance expiration date");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to the Manufacturer");

                    b.Property<string>("Model")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Vehicle Model");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Vehicle Registration Number");

                    b.Property<DateTime?>("TachographExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Vehicle Tachograph Certification expiration date");

                    b.Property<DateTime?>("TechnicalReviewExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Vehicle Technical Review expiration date");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int")
                        .HasComment("Vehicle type foreign key");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("VIN")
                        .HasComment("Vehicle VIN/Frame number");

                    b.Property<double>("WeightCapacity")
                        .HasColumnType("float")
                        .HasComment("Total capacity in tons");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcquiredOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Axles = 2,
                            BodyType = "Curtain",
                            EuroClass = "Euro6",
                            FirstRegistration = new DateTime(2011, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LiabilityInsurance = "010/LEV/1111111111-11",
                            LiabilityInsuranceExpirationDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerId = 1,
                            Model = "Atego",
                            RegistrationNumber = "CB 1111 CB",
                            VehicleTypeId = 1,
                            Vin = "MER1111111111",
                            WeightCapacity = 1.6399999999999999
                        },
                        new
                        {
                            Id = 2,
                            AcquiredOn = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Axles = 2,
                            BodyType = "Box",
                            EuroClass = "Euro5",
                            FirstRegistration = new DateTime(2012, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LiabilityInsurance = "020/LEV/2222222222-22",
                            LiabilityInsuranceExpirationDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerId = 6,
                            Model = "TGL",
                            RegistrationNumber = "CB 2222 CB",
                            TechnicalReviewExpirationDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleTypeId = 2,
                            Vin = "MAN2222222222",
                            WeightCapacity = 4.7000000000000002
                        },
                        new
                        {
                            Id = 3,
                            AcquiredOn = new DateTime(2024, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Axles = 3,
                            BodyType = "Frigo",
                            EuroClass = "Euro5",
                            FirstRegistration = new DateTime(2013, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LiabilityInsurance = "030/LEV/3333333333-33",
                            LiabilityInsuranceExpirationDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerId = 6,
                            Model = "TGL",
                            RegistrationNumber = "CB 3333 CB",
                            TachographExpirationDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleTypeId = 3,
                            Vin = "MAN3333333333",
                            WeightCapacity = 9.0
                        },
                        new
                        {
                            Id = 4,
                            AcquiredOn = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Axles = 2,
                            BodyType = "None",
                            EuroClass = "Euro4",
                            FirstRegistration = new DateTime(2014, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LiabilityInsurance = "040/LEV/4444444444-44",
                            LiabilityInsuranceExpirationDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerId = 7,
                            Model = "R420",
                            RegistrationNumber = "CB 4444 CB",
                            TachographExpirationDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TechnicalReviewExpirationDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleTypeId = 5,
                            Vin = "SCA4444444444",
                            WeightCapacity = 0.0
                        });
                });

            modelBuilder.Entity("FleetRouteManager.Data.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for Vehicle Type");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the Type was marked as deleted");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Type was deleted");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Type of vehicle");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Type = "Solo 7.5t"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Type = "Solo 12.0t"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Type = "Solo 18.0t"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Type = "Truck 26.0t"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Type = "Tractor"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Type = "Van 3.5t"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Type = "Semitrailer"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Type = "Trailer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FleetRouteManager.Data.Models.Vehicle", b =>
                {
                    b.HasOne("FleetRouteManager.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FleetRouteManager.Data.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FleetRouteManager.Data.Models.Manufacturer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("FleetRouteManager.Data.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
